/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<pair<TreeNode*,int>>arr;
    
    void level_order(TreeNode* root)
    {
        if(root==NULL)
            return;
        queue<pair<TreeNode*,int>>q;
        q.push(make_pair(root,0));//push {Node, Level} in the queue
        while(!q.empty())
        {
            auto current = q.front();
            arr.push_back(current);
            
            TreeNode* p = current.first;
            //cout<<p->val<<"\n";
            int level = current.second;
            
            if(p->left!=NULL)
                q.push(make_pair(p->left,level+1));
            
            if(p->right!=NULL)
                q.push(make_pair(p->right,level+1));
            
            q.pop();
        }
    }
    
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL)
            return ans;
        level_order(root);
        ans.resize(arr[arr.size()-1].second+1);
        for(int i=0;i<arr.size();i++)
        {
            TreeNode* pt = arr[i].first;
            int lev = arr[i].second;
            ans[lev].push_back(pt->val);
        }
        for(int i=1;i<ans.size();i+=2)
            reverse(ans[i].begin(),ans[i].end());
        return ans;
    }
};
