class Solution {
public:
    vector<vector<int>>dp; //dp[i][j] gives the max obtainable score by bursting balloons in the subarray (i,j)
    
    //last denotes the last ballon to be bursted in the range (i,j)
    //so total cost obtainable = nums[i-1]*nums[last]*nums[j+1] + rec(i,last) + rec(last+1,r)
    int rec(int i, int j, vector<int>&nums)
    {
        if(i>j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int ans = -1e9;
        
        for(int last=i;last<=j;last++)
        {
            int cost = ((i-1>=0)?nums[i-1]:1)*nums[last]*((j+1<nums.size())?nums[j+1]:1);
            cost+=rec(i,last-1,nums) + rec(last+1,j,nums);
            ans = max(cost,ans);
        }
        
        return dp[i][j] = ans;
    }
    
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        dp.resize(n+1,vector<int>(n+1,-1));
        return rec(0,n-1,nums);
    }
};
